// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/execution/state/state.go

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	inngest "github.com/inngest/inngest-cli/inngest"
	v2 "github.com/oklog/ulid/v2"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ActionComplete mocks base method.
func (m *MockState) ActionComplete(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionComplete", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ActionComplete indicates an expected call of ActionComplete.
func (mr *MockStateMockRecorder) ActionComplete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionComplete", reflect.TypeOf((*MockState)(nil).ActionComplete), id)
}

// ActionID mocks base method.
func (m *MockState) ActionID(id string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionID", id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionID indicates an expected call of ActionID.
func (mr *MockStateMockRecorder) ActionID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionID", reflect.TypeOf((*MockState)(nil).ActionID), id)
}

// Actions mocks base method.
func (m *MockState) Actions() map[string]map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].(map[string]map[string]interface{})
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockStateMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockState)(nil).Actions))
}

// Errors mocks base method.
func (m *MockState) Errors() map[string]error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(map[string]error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockStateMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockState)(nil).Errors))
}

// Event mocks base method.
func (m *MockState) Event() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Event indicates an expected call of Event.
func (mr *MockStateMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockState)(nil).Event))
}

// Identifier mocks base method.
func (m *MockState) Identifier() Identifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(Identifier)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockStateMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockState)(nil).Identifier))
}

// RunID mocks base method.
func (m *MockState) RunID() v2.ULID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunID")
	ret0, _ := ret[0].(v2.ULID)
	return ret0
}

// RunID indicates an expected call of RunID.
func (mr *MockStateMockRecorder) RunID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunID", reflect.TypeOf((*MockState)(nil).RunID))
}

// Workflow mocks base method.
func (m *MockState) Workflow() (inngest.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workflow")
	ret0, _ := ret[0].(inngest.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Workflow indicates an expected call of Workflow.
func (mr *MockStateMockRecorder) Workflow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workflow", reflect.TypeOf((*MockState)(nil).Workflow))
}

// WorkflowID mocks base method.
func (m *MockState) WorkflowID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// WorkflowID indicates an expected call of WorkflowID.
func (mr *MockStateMockRecorder) WorkflowID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowID", reflect.TypeOf((*MockState)(nil).WorkflowID))
}

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader) Load(ctx context.Context, i Identifier) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, i)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder) Load(ctx, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), ctx, i)
}

// MockMutater is a mock of Mutater interface.
type MockMutater struct {
	ctrl     *gomock.Controller
	recorder *MockMutaterMockRecorder
}

// MockMutaterMockRecorder is the mock recorder for MockMutater.
type MockMutaterMockRecorder struct {
	mock *MockMutater
}

// NewMockMutater creates a new mock instance.
func NewMockMutater(ctrl *gomock.Controller) *MockMutater {
	mock := &MockMutater{ctrl: ctrl}
	mock.recorder = &MockMutaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutater) EXPECT() *MockMutaterMockRecorder {
	return m.recorder
}

// ConsumePause mocks base method.
func (m *MockMutater) ConsumePause(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumePause", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumePause indicates an expected call of ConsumePause.
func (mr *MockMutaterMockRecorder) ConsumePause(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumePause", reflect.TypeOf((*MockMutater)(nil).ConsumePause), ctx, id)
}

// New mocks base method.
func (m *MockMutater) New(ctx context.Context, workflow inngest.Workflow, runID v2.ULID, input any) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, workflow, runID, input)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockMutaterMockRecorder) New(ctx, workflow, runID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockMutater)(nil).New), ctx, workflow, runID, input)
}

// SaveActionError mocks base method.
func (m *MockMutater) SaveActionError(ctx context.Context, i Identifier, actionID string, err error) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveActionError", ctx, i, actionID, err)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveActionError indicates an expected call of SaveActionError.
func (mr *MockMutaterMockRecorder) SaveActionError(ctx, i, actionID, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActionError", reflect.TypeOf((*MockMutater)(nil).SaveActionError), ctx, i, actionID, err)
}

// SaveActionOutput mocks base method.
func (m *MockMutater) SaveActionOutput(ctx context.Context, i Identifier, actionID string, data map[string]interface{}) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveActionOutput", ctx, i, actionID, data)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveActionOutput indicates an expected call of SaveActionOutput.
func (mr *MockMutaterMockRecorder) SaveActionOutput(ctx, i, actionID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActionOutput", reflect.TypeOf((*MockMutater)(nil).SaveActionOutput), ctx, i, actionID, data)
}

// SavePause mocks base method.
func (m *MockMutater) SavePause(ctx context.Context, p Pause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePause", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePause indicates an expected call of SavePause.
func (mr *MockMutaterMockRecorder) SavePause(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePause", reflect.TypeOf((*MockMutater)(nil).SavePause), ctx, p)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ConsumePause mocks base method.
func (m *MockManager) ConsumePause(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumePause", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumePause indicates an expected call of ConsumePause.
func (mr *MockManagerMockRecorder) ConsumePause(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumePause", reflect.TypeOf((*MockManager)(nil).ConsumePause), ctx, id)
}

// Load mocks base method.
func (m *MockManager) Load(ctx context.Context, i Identifier) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, i)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockManagerMockRecorder) Load(ctx, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockManager)(nil).Load), ctx, i)
}

// New mocks base method.
func (m *MockManager) New(ctx context.Context, workflow inngest.Workflow, runID v2.ULID, input any) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, workflow, runID, input)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockManagerMockRecorder) New(ctx, workflow, runID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockManager)(nil).New), ctx, workflow, runID, input)
}

// SaveActionError mocks base method.
func (m *MockManager) SaveActionError(ctx context.Context, i Identifier, actionID string, err error) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveActionError", ctx, i, actionID, err)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveActionError indicates an expected call of SaveActionError.
func (mr *MockManagerMockRecorder) SaveActionError(ctx, i, actionID, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActionError", reflect.TypeOf((*MockManager)(nil).SaveActionError), ctx, i, actionID, err)
}

// SaveActionOutput mocks base method.
func (m *MockManager) SaveActionOutput(ctx context.Context, i Identifier, actionID string, data map[string]interface{}) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveActionOutput", ctx, i, actionID, data)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveActionOutput indicates an expected call of SaveActionOutput.
func (mr *MockManagerMockRecorder) SaveActionOutput(ctx, i, actionID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActionOutput", reflect.TypeOf((*MockManager)(nil).SaveActionOutput), ctx, i, actionID, data)
}

// SavePause mocks base method.
func (m *MockManager) SavePause(ctx context.Context, p Pause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePause", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePause indicates an expected call of SavePause.
func (mr *MockManagerMockRecorder) SavePause(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePause", reflect.TypeOf((*MockManager)(nil).SavePause), ctx, p)
}
